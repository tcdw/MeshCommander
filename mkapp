#!/bin/bash

set -e

NAME=meshcommander
BASE=${0%/*}
TMP="$(mktemp -d)"
JS=${TMP}/appbuild.mjs
PACKAGE_JSON=${TMP}/package.json
BUILD=${BASE}/out
APP=${BUILD}/${NAME}.app
export CODESIGN_ALLOCATE="$(xcrun -find codesign_allocate)"
#CHILD_ENT=${BASE}/entitlements-child.plist
#PARENT_ENT=${BASE}/entitlements-parent.plist
ID="$(security find-identity | awk '/ID Application/ {print $2}' | uniq)"

mkdir -p ${TMP}

## Script to pass build parameters to nw-builder
> ${JS}
cat<<EOF>>${JS}
import nwbuild from 'nw-builder';

nwbuild({
    srcDir: '${BASE}/source',
	glob: false,
    platforms: ['osx'],
    buildType: 'default',
    macIcns: './files/nw.icns',
    macPlist: './files/Info.plist'
}).then(function () {
   console.log('all done!');
}).catch(function (error) {
    console.error(error);
});
EOF

> ${PACKAGE_JSON}
cat<<EOF>>${PACKAGE_JSON}
{
	"dependencies": {
		"nw-builder": "4.10.0"
	}
}
EOF

## Install nw-builder
npm --prefix ${TMP} install

## Build the application
node ${JS}

## Check for successful completion, or otherwise abort the script
if [[ $? == 0 ]]
then
	echo ""
        ## The InfoPlist.strings file provides details that appear
	## in the application's "About" menu item
	echo "Copying \"InfoPlist.strings\" to \"lproj\" directory"
	cp -r ${BASE}/files/en.lproj ${APP}/Contents/Resources/
	mv ${APP}/Contents/Resources/app.icns ${APP}/Contents/Resources/nw.icns
	NWVER=$(ls "${APP}/Contents/Frameworks/nwjs Framework.framework/Versions/" | awk '{gsub(/\//,""); print}')
	echo ""
else
	echo "ERROR: Failed to package ${APP##*/}"
	exit 1
fi

## Sign and verify signature
echo "Signing Application"
echo ""

codesign --deep --force --verify --verbose --sign "${ID}" "${APP}/Contents/Frameworks/nwjs Framework.framework/Versions/Current/libnode.dylib"
codesign --deep --force --verify --verbose --sign "${ID}" "${APP}/Contents/Frameworks/nwjs Framework.framework/Versions/Current/libffmpeg.dylib"
codesign --deep --force --verify --verbose --sign "${ID}" "${APP}/Contents/Frameworks/nwjs Framework.framework"
codesign --deep --force --verify --verbose --sign "${ID}" "${APP}/Contents/Frameworks/nwjs Framework.framework/Versions/Current/Helpers/app_mode_loader"
codesign --deep --force --verify --verbose --sign "${ID}" "${APP}/Contents/Frameworks/nwjs Framework.framework/Versions/Current/Helpers/chrome_crashpad_handler"
codesign --deep --force --verify --verbose --sign "${ID}" "${APP}/Contents/Frameworks/nwjs Framework.framework/Versions/Current/Helpers/nwjs Helper (GPU).app"
codesign --deep --force --verify --verbose --sign "${ID}" "${APP}/Contents/Frameworks/nwjs Framework.framework/Versions/Current/Helpers/nwjs Helper (Plugin).app"
codesign --deep --force --verify --verbose --sign "${ID}" "${APP}/Contents/Frameworks/nwjs Framework.framework/Versions/Current/Helpers/nwjs Helper (Renderer).app"
codesign --deep --force --verify --verbose --sign "${ID}" "${APP}/Contents/Frameworks/nwjs Framework.framework/Versions/Current/Helpers/nwjs Helper.app"

codesign --deep --force --verify --verbose --sign "${ID}" "${APP}"
#
echo ""
echo "Verifying signature"
echo ""

codesign --verify --deep --display --verbose=4 "${APP}"
echo ""

## Check if Gatekeeper will allow application execution
echo ""
echo "Veriyfing Gatekeeper acceptance..."
echo ""

spctl --ignore-cache --no-cache --assess --type execute --verbose=4 "${APP}"
echo ""

rm ${JS}
